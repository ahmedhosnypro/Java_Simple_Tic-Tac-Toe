type: edu
custom_name: First move!
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt(row * 3 + col));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        String input;
        Clue(String input, int x, int y) {
            this.input = input;
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static final String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;

            for (String startField : new String[] {
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            }) {

                for (String input : inputs) {
                    String fullInput = iterateCells(input);

                    String[] strNums = input.split("\\s+");
                    int x = Integer.parseInt(strNums[0]);
                    int y = Integer.parseInt(strNums[1]);

                    if (i % 2 == 1) {
                        // mix with incorrect data
                        fullInput = "4 " + i + "\n" + fullInput;
                    }

                    tests.add(new TestCase<Clue>()
                        .setInput(startField + "\n" + fullInput)
                        .setAttach(new Clue(startField, x, y)));

                    i++;
                }

            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() != 2) {
                return new CheckResult(false,
                    "Can't find two fields inside output");
            }

            TicTacToeField curr = fields.get(0);
            TicTacToeField next = fields.get(1);

            TicTacToeField correctCurr = new TicTacToeField(clue.input);
            TicTacToeField correctNext = new TicTacToeField(correctCurr.field);

            String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
            for (String input : numInputs) {
                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);
                if (correctNext.field[x - 1][y - 1] == FieldState.FREE) {
                    correctNext.field[x - 1][y - 1] = FieldState.X;
                    break;
                }
            }

            if (!curr.equalTo(correctCurr)) {
                return new CheckResult(false,
                    "The first field is not equal to the input field");
            }

            if (!next.equalTo(correctNext)) {
                return new CheckResult(false,
                    "The first field is correct, but the second is not");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Grid.java
  visible: true
  text: |
    package tictactoe;

    public class Grid {
        private char[][] grid = new char[3][3];
        private char[][] rotatedGrid = new char[3][3];
        private char[][] sides;

        Grid(String symbols) {
            if (symbols.length() == 9) {
                symbols = symbols.replaceAll("_", " ");
                int j = 0;
                for (int i = 0; i < 3; i++) {
                    grid[0][i] = symbols.charAt(j);
                    j++;
                }
                for (int i = 0; i < 3; i++) {
                    grid[1][i] = symbols.charAt(j);
                    j++;
                }
                for (int i = 0; i < 3; i++) {
                    grid[2][i] = symbols.charAt(j);
                    j++;
                }
                //diagonal
                char[] diagonal1 = new char[3];
                for (int i = 0; i < 3; i++){
                    diagonal1[i] = grid[i][i];
                }
                char[] diagonal2 = new char[3];
                diagonal2[0] = grid[0][2];
                diagonal2[1] = grid[1][1];
                diagonal2[2] = grid[2][0];
                //rotatedGrid
                for (int i = 0; i < 3; i++){
                    for (int k = 0; k < 3; k++){
                        rotatedGrid[i][k] = grid[k][i];
                    }
                }
                sides = new char[][]{grid[0], grid[1], grid[2], rotatedGrid[0], rotatedGrid[1], rotatedGrid[2],
                        diagonal1, diagonal2};
            }
        }

        public char[][] getRotatedGrid() {
            return rotatedGrid;
        }
        public void setGrid(char[][] grid) {
            this.grid = grid;
        }
        public char[][] getGrid() {
            return grid;
        }
        public char[][] getSides() {
            return sides;
        }
    }
  learner_created: true
- name: src/tictactoe/Print.java
  visible: true
  text: |
    package tictactoe;

    public class Print {
        static void printGrid(Grid grid){
            System.out.println("---------");
            for (char[] row: grid.getGrid()){
                System.out.print("| ");
                for (char ch: row){
                    System.out.print(ch + " ");
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }
    }
  learner_created: true
- name: src/tictactoe/GridState.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Arrays;

    public class GridState {
        static void state(Grid grid) {
            String check = "";
            int X = 0;
            int O = 0;
            int empty = 0;
            for (char[] row : grid.getGrid()) {
                for (char ch : row) {
                    if (ch == 'X') {
                        X++;
                    } else if (ch == 'O') {
                        O++;
                    } else if (ch == ' ') {
                        empty++;
                    }
                }
            }

            if (Math.abs(X - O) > 1) {
                check = "Impossible";
            } else {
                if (empty == 0) {
                    check = checkSides(grid);
                } else if (empty > 0) {
                    switch (checkSides(grid)){
                        case "Impossible":
                            check = "Impossible";
                            break;
                        case "X wins":
                            check = "X wins";
                            break;
                        case "O wins":
                            check = "O wins";
                            break;
                        default:
                            check = "Game not finished";
                            break;
                    }
                }
            }
            System.out.println(check);
        }
        static char[] simpleSides(Grid grid) {
            char[][] sides = grid.getSides();
            char[] simpleSides = new char[grid.getSides().length];
            Arrays.fill(simpleSides, 'A');
            for (int i = 0; i < sides.length; i++) {
                char last = sides[i][0];
                boolean isInRow = true;
                for (int j = 1; j < 3; j++) {
                    if (sides[i][j] == last) {
                        last = sides[i][j];
                    } else {
                        isInRow = false;
                        break;
                    }
                }
                if (isInRow) {
                    simpleSides[i] = sides[i][0];
                }
            }
            return simpleSides;
        }
        static String checkSides(Grid grid) {
            String check = "";
            char[] Sides = new char[8];
            Sides = simpleSides(grid);
            int X = 0;
            int O = 0;
            for (int i = 0; i < Sides.length; i++) {
                if (Sides[i] == 'X') {
                    X++;
                } else if (Sides[i] == 'O') {
                    O++;
                }
            }
            if ((X > 0 && O > 0)) {
                check = "Impossible";
            } else {
                if (X == 1) {
                    check = "X wins";
                } else if (O == 1) {
                    check = "O wins";
                }
                else if (X == O){
                    check = "Draw";
                }
            }
            return check;
        }
    }
  learner_created: true
- name: src/tictactoe/Move.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/48/stages/258/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 30 May 2021 16:08:03 UTC
record: 4
